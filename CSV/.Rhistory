plot(df.CVS$SPENDS, fitted(lin.regr))
plot(train.CVS$SPENDS, fitted(lin.regr))
lin.regr$model
plot(lin.regr$model[[1]], fitted(lin.regr))
plot(poly.fit$model[[1]], fitted(poly.fit))
plot(inverse.fit$model[[1]], fitted(inverse.fit))
plot(lin.regr, pch=16, which=1)
plot(poly.fit, pch=16, which=1)
plot(inverse.fit, pch=16, which=1)
important.regr = varImp(lin.regr, scale = FALSE)
plot(important.regr)
lin.regr <- train(SPENDS ~ PRIMARY_VISIT + DAYS_FROM_LAST_VISIT + TTL_QNTY + CPN_FLAG, data = train.CVS, method = "lm")
summary(lin.regr)
important.regr = varImp(lin.regr, scale = FALSE)
plot(important.regr)
poly.fit <- train(SPENDS ~ PRIMARY_VISIT + DAYS_FROM_LAST_VISIT + I(TTL_QNTY^2) + CPN_FLAG, data = train.CVS, method = "lm")
summary(poly.fit)
important.regr = varImp(poly.fit, scale = FALSE)
plot(important.regr)
inverse.fit <- train(SPENDS ~ PRIMARY_VISIT + DAYS_FROM_LAST_VISIT + I(1/TTL_QNTY) + CPN_FLAG, data = train.CVS, method = "lm")
summary(inverse.fit)
important.regr = varImp(inverse.fit, scale = FALSE)
plot(important.regr)
library('caret')
df.CVS <- read.csv(file="analysis_data.csv", header=TRUE, sep=",")
df.CVS <- df.CVS[,-1]
attach(df.CVS)
set.seed(1)
training = sample(nrow(df.CVS), nrow(df.CVS)/2)
train.CVS = df.CVS[training,]
test.CVS = df.CVS[-training,]
poly.fit = lm(SPENDS ~ PRIMARY_VISIT + DAYS_FROM_LAST_VISIT + I(TTL_QNTY^2) + CPN_FLAG, data = train.CVS)
summary(poly.fit)
library('caret')
df.CVS <- read.csv(file="analysis_data.csv", header=TRUE, sep=",")
df.CVS <- df.CVS[,-1]
attach(df.CVS)
set.seed(1)
training = sample(nrow(df.CVS), nrow(df.CVS)/2)
train.CVS = df.CVS[training,]
test.CVS = df.CVS[-training,]
lin.regr <- lm(SPENDS ~ PRIMARY_VISIT + DAYS_FROM_LAST_VISIT + TTL_QNTY + CPN_FLAG, data = train.CVS)
summary(lin.regr)
poly.fit = lm(SPENDS ~ PRIMARY_VISIT + DAYS_FROM_LAST_VISIT + I(TTL_QNTY^2) + CPN_FLAG, data = train.CVS)
summary(poly.fit)
inverse.fit = lm(SPENDS ~ PRIMARY_VISIT + DAYS_FROM_LAST_VISIT + I(1/TTL_QNTY) + CPN_FLAG, data = train.CVS)
summary(inverse.fit)
library('caret')
library('scatterplot3d')
set.seed(1)
df.CVS <- read.csv(file="analysis_data_shoop.csv", header=TRUE, sep=",")
df.CVS <- df.CVS[,-1]
primvisit.c = scale(df.CVS$PRIMARY_VISIT, center=TRUE, scale=FALSE)
daysfromlast.c = scale(df.CVS$DAYS_FROM_LAST_VISIT, center=TRUE, scale=FALSE)
spendprev.c = scale(df.CVS$SPENDSPRV, center=TRUE, scale=FALSE)
newvars.c = cbind(primvisit.c, daysfromlast.c, spendprev.c)
newDF.CVS = cbind(df.CVS, newvars.c)
names(newDF.CVS)[10:12] = c("primVisit.c", "daysFromLast.c", "spendPrev.c" )
summary(newDF.CVS)
attach(newDF.CVS)
primVisit.c
training = sample(nrow(newDF.CVS), nrow(newDF.CVS)/2)
train.CVS = newDF.CVS[training,]
test.CVS = newDF.CVS[-training,]
lin.regr <- lm(SPENDS ~ primVisit.c + daysFromLast.c + CPN_FLAG + spendPrev.c + QNTYPRV, data = train.CVS)
summary(lin.regr)
lin.regr <- lm(SPENDS ~ primVisit.c + daysFromLast.c + CPN_FLAG + spendPrev.c, data = train.CVS)
summary(lin.regr)
inverse.fit = lm(log(SPENDS) ~ primVisit.c + daysFromLast.c + CPN_FLAG + spendPrev.c, data = train.CVS)
summary(inverse.fit)
inverse.pred = predict(inverse.fit, test.CVS)
mean((inverse.pred - test.CVS$SPENDS)^2)
lin.pred = predict(lin.regr, test.CVS)
mean((lin.pred - test.CVS$SPENDS)^2)
mean((inverse.pred - test.CVS$SPENDS)^2)
where(df.CVS$SPENDS < 500)
which(df.CVS$SPENDS < 500)
which(df.CVS$SPENDS < 200)
which(df.CVS$SPENDS < 100)
which(df.CVS$SPENDS < 50)
which(df.CVS$SPENDS < 50)
which(df.CVS$SPENDS < 5)
which(df.CVS$SPENDS < 10)
plot(df.CVS$DATE_VISIT[which(df.CVS$SPENDS < 10)], df.CVS$SPENDS[which(df.CVS$SPENDS < 10)])
plot(df.CVS$DATE_VISIT[which(df.CVS$SPENDS < 20)], df.CVS$SPENDS[which(df.CVS$SPENDS < 20)])
plot(df.CVS$DATE_VISIT[1:10], df.CVS$SPENDS[1:10])
View(df.CVS)
plot(df.CVS$DATE_VISIT[which(df.CVS$SPENDS < 20)], df.CVS$SPENDS[which(df.CVS$SPENDS < 20)])
plot(df.CVS$DATE_VISIT[1:10], df.CVS$SPENDS[1:10])
plot(df.CVS$DATE_VISIT[1:20], df.CVS$SPENDS[1:20])
plot(df.CVS$DATE_VISIT[1:20], df.CVS$SPENDS[1:20])
scatterplot(df.CVS$DATE_VISIT[1:20], df.CVS$SPENDS[1:20])
qplot(df.CVS$DATE_VISIT[1:20], df.CVS$SPENDS[1:20])
plot(df.CVS$DATE_VISIT[1:20], df.CVS$SPENDS[1:20])
qplot(df.CVS$DATE_VISIT[1:20], df.CVS$SPENDS[1:20])
qplot(df.CVS$DATE_VISIT[which(df.CVS$SPENDS < 20)], df.CVS$SPENDS[which(df.CVS$SPENDS < 20)])
plot(df.CVS$DATE_VISIT[which(df.CVS$SPENDS < 20)], df.CVS$SPENDS[which(df.CVS$SPENDS < 20)])
library('scatterplot3d')
library('corrplot')
library('lubridate')
set.seed(1)
df.CVS <- read.csv(file="analysis_data_ming.csv", header=TRUE, sep=",")
newDFwithoutQNTY <- df.CVS[-c(1,2,3,6)]
newDFwithQNTY <- df.CVS[-c(1,2,3)]
training = sample(nrow(df.CVS), nrow(df.CVS)/2)
train.withoutQNTY = newDFwithoutQNTY[training,]
test.withoutQNTY = newDFwithoutQNTY[-training,]
train.withQNTY = newDFwithQNTY[training,]
test.withQNTY = newDFwithQNTY[-training,]
lin.regr.noQNTY <- lm(SPENDS ~ ., data = train.withoutQNTY)
lin.regr.QNTY <- lm(SPENDS ~., data = train.withQNTY)
summary(lin.regr.noQNTY)
summary(lin.regr.QNTY)
lin.pred.noQNTY = predict(lin.regr.noQNTY, test.withoutQNTY)
lin.pred.QNTY = predict(lin.regr.QNTY, test.withQNTY)
mean((lin.pred.noQNTY - test.withoutQNTY$SPENDS)^2)
mean((lin.pred.QNTY - test.withQNTY$SPENDS)^2)
logresp.fit.noQNTY <- lm(log(SPENDS) ~ ., data = train.withoutQNTY)
logresp.fit.QNTY <- lm(log(SPENDS) ~ ., data = train.withQNTY)
logresp.fit.invQNTY <- lm(log(SPENDS) ~ PRIMARY_VISIT + DAYS_FROM_LAST_VISIT + I(1/TTL_QNTY) + CPN_FLAG + SPENDSPRV, data = train.withQNTY)
summary(logresp.fit.noQNTY)
logresp.fit.QNTY <- lm(log(SPENDS) ~ ., data = train.withQNTY)
summary(logresp.fit.QNTY)
logresp.fit.invQNTY <- lm(log(SPENDS) ~ PRIMARY_VISIT + DAYS_FROM_LAST_VISIT + I(1/TTL_QNTY) + CPN_FLAG + SPENDSPRV, data = train.withQNTY)
summary(logresp.fit.invQNTY)
logresp.pred.noQNTY <- predict(logresp.fit.noQNTY, test.withoutQNTY)
logresp.pred.QNTY <- predict(logresp.fit.QNTY, test.withQNTY)
logresp.pred.invQNTY <- predict(logresp.fit.invQNTY, test.withQNTY)
mean((logresp.pred.noQNTY - test.withoutQNTY$SPENDS)^2)
mean((logresp.pred.QNTY - test.withQNTY$SPENDS)^2)
mean((logresp.pred.invQNTY - test.withQNTY$SPENDS)^2)
logresp.pred.noQNTY[1]
test.withoutQNTY$SPENDS[1]
log(test.withoutQNTY$SPENDS[1])
log(test.withoutQNTY$SPENDS[1:2])
mean((logresp.pred.noQNTY - log(test.withoutQNTY$SPENDS))^2)
mean((logresp.pred.QNTY - log(test.withQNTY$SPENDS))^2)
mean((logresp.pred.invQNTY - log(test.withQNTY$SPENDS))^2)
plot(lin.regr.noQNTY)
mean((logresp.pred.invQNTY - log(test.withQNTY$SPENDS))^2)
plot(lin.regr.noQNTY, which = 1)
plot(lin.pred.noQNTY[-length(lin.pred.noQNTY)], lin.regr.noQNTY$residuals)
plot(lin.pred.noQNTY, lin.regr.noQNTY$residuals)
plot(lin.regr.noQNTY, which = 1, main = "Residuals vs Fitted, MSLR, no QNTY")
plot(lin.regr.noQNTY, which = 1, main = "MSLR, no QNTY")
plot(lin.regr.QNTY, which = 1, main = "MSLR, w/ QNTY")
plot(logresp.fit.noQNTY, which = 1, main = "MSLR, where response = log(SPENDS), no QNTY")
plot(logresp.fit.noQNTY[-length(logresp.fit.noQNTY)], logresp.fit.noQNTY$residuals)
plot(logresp.fit.noQNTY[-length(logresp.fit.noQNTY)], logresp.fit.noQNTY$residuals)
length(logresp.fit.noQNTY$residuals)
length(logresp.fit.noQNTY)
length(lin.pred.noQNTY)
plot(logresp.pred.noQNTY[-length(logresp.pred.noQNTY)], logresp.fit.noQNTY$residuals)
logresp.pred.noQNTY
logresp.pred.noQNTY[1]
test.CVS$SPENDS[1]
test.withoutQNTY$SPENDS[1]
log(test.withoutQNTY$SPENDS[1])
logresp.pred.noQNTY[1]
log(test.withoutQNTY$SPENDS[1])
exp(logresp.pred.noQNTY[1])
test.withoutQNTY$SPENDS[1]
test.withoutQNTY$SPENDS[2]
exp(logresp.pred.noQNTY[2]])
exp(logresp.pred.noQNTY[2])
exp(logresp.pred.noQNTY[3]])
exp(logresp.pred.noQNTY[3])
test.withoutQNTY$SPENDS[3]
test.withoutQNTY[3,]
coef(logresp.fit.noQNTY)
logresp.noQNTY.coefs = coef(logresp.fit.noQNTY)
logresp.noQNTY.coefs
logresp.noQNTY.coefs[1]
exp(logresp.noQNTY.coefs[1] + logresp.noQNTY.coefs[2]*test.withoutQNTY$PRIMARY_VISIT[3] + logresp.noQNTY.coefs[3]*test.withoutQNTY$DAYS_FROM_LAST_VISIT[3] + logresp.noQNTY.coefs[4]*test.withoutQNTY$CPN_FLAG[3] + logresp.noQNTY.coefs[5]*test.withoutQNTY$SPENDSPRV[3])
exp(logresp.noQNTY.coefs[1] + logresp.noQNTY.coefs[2]*test.withoutQNTY$PRIMARY_VISIT[5] + logresp.noQNTY.coefs[3]*test.withoutQNTY$DAYS_FROM_LAST_VISIT[5] + logresp.noQNTY.coefs[4]*test.withoutQNTY$CPN_FLAG[5] + logresp.noQNTY.coefs[5]*test.withoutQNTY$SPENDSPRV[5])
test.withoutQNTY$SPENDS[5]
range(1,10)
range(1:10)
seq(1:10)
sample(10,2)
testSPENDS = test.withoutQNTY$SPENDS[sample(nrow(test.withoutQNTY),10),]
testSPENDS = test.withoutQNTY$SPENDS[sample(nrow(test.withoutQNTY),10)]
testSPENDS
testSPENDS = test.withoutQNTY$SPENDS[sample(nrow(test.withoutQNTY),10)]
testPRIMVISIT = test.withoutQNTY$PRIMARY_VISIT[sample(nrow(test.withoutQNTY),10)]
testDAYSLASTVISIT = test.withoutQNTY$DAYS_FROM_LAST_VISIT[sample(nrow(test.withoutQNTY),10)]
testCPN = test.withoutQNTY$CPN_FLAG[sample(nrow(test.withoutQNTY),10)]
testPREVSPENDS = test.withoutQNTY$SPENDSPRV[sample(nrow(test.withoutQNTY),10)]
logresp.noQNTY.coefs = coef(logresp.fit.noQNTY)
testSPENDS
randomSampling = sample(nrow(test.withoutQNTY),10)
randomSampling = sample(nrow(test.withoutQNTY),10)
randomSampling = sample(nrow(test.withoutQNTY),10)
randomSampling = sample(nrow(test.withoutQNTY),10)
randomSampling = sample(nrow(test.withoutQNTY),10)
testSPENDS = test.withoutQNTY$SPENDS[randomSampling]
testPRIMVISIT = test.withoutQNTY$PRIMARY_VISIT[randomSampling]
testDAYSLASTVISIT = test.withoutQNTY$DAYS_FROM_LAST_VISIT[randomSampling]
testCPN = test.withoutQNTY$CPN_FLAG[randomSampling]
testPREVSPENDS = test.withoutQNTY$SPENDSPRV[randomSampling]
logresp.noQNTY.coefs = coef(logresp.fit.noQNTY)
logresp.pred.testing = predict(logresp.fit.noQNTY, test.withoutQNTY[randomSampling])
logresp.pred.testing = predict(logresp.fit.noQNTY, test.withoutQNTY[randomSampling,])
testSPENDS
logresp.pred.testing
exp(logresp.pred.testing)
randomSampling = sample(nrow(test.withoutQNTY),10)
testSPENDS = test.withoutQNTY$SPENDS[randomSampling]
logresp.pred.testing = predict(logresp.fit.noQNTY, test.withoutQNTY[randomSampling,])
testSPENDS
exp(logresp.pred.testing)
library('ggplot2')
library('tidyr')
set.seed(1)
df.CVS <- read.csv(file="analysis_data_ming.csv", header=TRUE, sep=",")
newDF <- df.CVS[-c(1,2,3,6)]
training = sample(nrow(newDF), nrow(newDF)/2)
train.CVS = newDF[training,]
test.CVS = newDF[-training,]
logresp.fit <- lm(log(SPENDS) ~ ., data = train.CVS)
randomSampling = sample(nrow(test.CVS),100)
samplingDF = test.CVS[randomSampling,]
head(samplingDF)
logresp.pred = predict(logresp.fit, samplingDF)
predSPENDS = exp(logresp.pred)
samplingDF$predSPENDS <- predSPENDS
samplingDF$residuals <- samplingDF$SPENDS - samplingDF$predSPENDS
ggplot(samplingDF)+aes(x = SPENDS) +
geom_point(aes(y = predSPENDS)) +
geom_abline(intercept = 0, slope = 1, alpha = 0.5) +
xlim(0,max(samplingDF$SPENDS)) +
ylim(0,max(samplingDF$predSPENDS)) +
theme_bw()
samplingDF %>%
gather(key = "iv", value = "x", -SPENDS, -predSPENDS, -residuals) %>%
ggplot(aes(x = x, y = SPENDS)) +
geom_segment(aes(xend = x, yend = predSPENDS), alpha = .3) +
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE) +
geom_point(aes(y = predSPENDS), shape = 1) +
facet_grid(~ iv, scales = "free_x") +  # Split panels here by `iv`
theme_bw()
summary(logresp.fit)
library('e1071')
set.seed(123)
# 60 random obs, 3 classes, 50 variables
x1 = runif(3*20*50)
x2 = runif(500) - 0.3
x3
y = 1*(x1^2 - x2^2 > 0)
x1
x = runif(3*20*50)
x = matrix(x, ncol = 50)
x
x.head(5)
head(x)
x.shape
shape(x)
x.shape()
dim(x)
prcomp
pr.out = prcomp(x)
plot(pr.out$x[, 1:2], xlab = 'Z1', ylab = 'Z2')
x = runif(3*20*50, mean == 0, sd == 0.01)
x = matrix(x, ncol = 50)
library('e1071')
set.seed(123)
x = runif(3*20*50)
x = matrix(x, ncol = 50)
x[1:20,2] == 1   # rows 1:20 are class1
x[21:40, 1] == 2 # rows 21:40 are class2
x[21:40, 2] == 2
x[41:60, 1] == 1 # rows 41:60 are class3
labels = c(rep(1,20), rep(2,20), rep(3,20))
x = runif(3*20*50)
x = matrix(x, ncol = 50)
x[1:20,2] = 1   # rows 1:20 are class1
x[21:40, 1] = 2 # rows 21:40 are class2
x[21:40, 2] = 2
x[41:60, 1] = 1 # rows 41:60 are class3
labels = c(rep(1,20), rep(2,20), rep(3,20))
pr.out = prcomp(x)
plot(pr.out$x[, 1:2], xlab = 'Z1', ylab = 'Z2')
pr.out = prcomp(x)
plot(pr.out$x[, 1:2], col = 1:2, xlab = 'Z1', ylab = 'Z2')
pr.out = prcomp(x)
plot(pr.out$x[, 1:2], col = 1:3, xlab = 'Z1', ylab = 'Z2')
x = rnorm(3*20*50)
x = rnorm(3*20*50)
x = matrix(x, ncol = 50)
x[1:20,2] = 1   # rows 1:20 are class1
x[21:40, 1] = 2 # rows 21:40 are class2
x[21:40, 2] = 2
x[41:60, 1] = 1 # rows 41:60 are class3
labels = c(rep(1,20), rep(2,20), rep(3,20))
# b
# PCA
pr.out = prcomp(x)
plot(pr.out$x[, 1:2], col = 1:3, xlab = 'Z1', ylab = 'Z2')
x = rnorm(3*20*50, mean == 0, sd == 0.01)
x = matrix(x, ncol = 50)
x[1:20,2] = 1   # rows 1:20 are class1
x[21:40, 1] = 2 # rows 21:40 are class2
x[21:40, 2] = 2
x[41:60, 1] = 1 # rows 41:60 are class3
labels = c(rep(1,20), rep(2,20), rep(3,20))
# b
# PCA
pr.out = prcomp(x)
plot(pr.out$x[, 1:2], col = 1:3, xlab = 'Z1', ylab = 'Z2')
library('e1071')
set.seed(123)
# 60 random obs, 3 classes, 50 variables
# a
x = rnorm(3*20*50, mean == 0, sd == 0.001)
x = matrix(x, ncol = 50)
x[1:20,2] = 1   # rows 1:20 are class1
x[21:40, 1] = 2 # rows 21:40 are class2
x[21:40, 2] = 2
x[41:60, 1] = 1 # rows 41:60 are class3
labels = c(rep(1,20), rep(2,20), rep(3,20))
# b
# PCA
pr.out = prcomp(x)
plot(pr.out$x[, 1:2], col = 1:3, xlab = 'Z1', ylab = 'Z2')
library('e1071')
set.seed(2)
# 60 random obs, 3 classes, 50 variables
# a
x = rnorm(3*20*50, mean == 0, sd == 0.001)
x = matrix(x, ncol = 50)
x[1:20,2] = 1   # rows 1:20 are class1
x[21:40, 1] = 2 # rows 21:40 are class2
x[21:40, 2] = 2
x[41:60, 1] = 1 # rows 41:60 are class3
labels = c(rep(1,20), rep(2,20), rep(3,20))
# b
# PCA
pr.out = prcomp(x)
plot(pr.out$x[, 1:2], col = 1:3, xlab = 'Z1', ylab = 'Z2')
library('e1071')
set.seed(2)
# 60 random obs, 3 classes, 50 variables
# a
x = rnorm(3*20*50)
x = matrix(x, ncol = 50)
x[1:20,2] = 1   # rows 1:20 are class1
x[21:40, 1] = 2 # rows 21:40 are class2
x[21:40, 2] = 2
x[41:60, 1] = 1 # rows 41:60 are class3
labels = c(rep(1,20), rep(2,20), rep(3,20))
# b
# PCA
pr.out = prcomp(x)
plot(pr.out$x[, 1:2], col = 1:3, xlab = 'Z1', ylab = 'Z2')
View(x)
View(x)
pr.out = prcomp(x)
summary(pr.out)
plot(pr.out$x[, 1:2], col = 5:7, xlab = 'Z1', ylab = 'Z2', pch = 19)
pr.out = prcomp(x)
summary(pr.out)
plot(pr.out$x[, 1:2], col = 4:6, xlab = 'Z1', ylab = 'Z2', pch = 19)
library('e1071')
set.seed(2)
# 60 random obs, 3 classes, 50 variables
# a
x = rnorm(20*3*50)
x = matrix(x, ncol = 50)
x[1:20,2] = 1   # rows 1:20 are class1
x[21:40, 1] = 2 # rows 21:40 are class2
x[21:40, 2] = 2
x[41:60, 1] = 1 # rows 41:60 are class3
labels = c(rep(1,20), rep(2,20), rep(3,20))
# b
# PCA
pr.out = prcomp(x)
summary(pr.out)
plot(pr.out$x[, 1:2], col = 4:6, xlab = 'Z1', ylab = 'Z2', pch = 19)
pr.out = prcomp(x, scale=FALSE)
summary(pr.out)
plot(pr.out$x[, 1:2], col = 4:6, xlab = 'Z1', ylab = 'Z2', pch = 19)
x
x[:,1]
x[,1]
x[,2]
kmeans()
kmeans(x)
kmeans(x,3)
km.out = kmeans(x, 3, nstart=20)
table(km.out$cluster, labels)
library('e1071')
set.seed(123)
# 60 random obs, 3 classes, 50 variables
# a
x = rnorm(3*20*50)
x = matrix(x + 0.5, ncol = 50)
x[1:20,2] = 1   # rows 1:20 are class1
x[21:40, 1] = 3 # rows 21:40 are class2
x[21:40, 2] = 3
x[41:60, 1] = 1 # rows 41:60 are class3
labels = c(rep(1,20), rep(2,20), rep(3,20))
pr.out = prcomp(x)
summary(pr.out)
plot(pr.out$x[, 1:2], col = 4:6, xlab = 'Z1', ylab = 'Z2', pch = 19)
pr.out = prcomp(x)
summary(pr.out)
plot(pr.out$x, col = 4:6, xlab = 'Z1', ylab = 'Z2', pch = 19)
pr.out$x
dim(pr.out$x)
x = matrix(rnorm(20*3*50, mean=0, sd=0.001), ncol=50)
x[1:20, 2] = 1
x[21:40, 1] = 2
x[21:40, 2] = 2
x[41:60, 1] = 1
labels = c(rep(1,20), rep(2,20), rep(3,20))
# b
# PCA
pr.out = prcomp(x)
summary(pr.out)
plot(pr.out$x, col = 4:6, xlab = 'Z1', ylab = 'Z2', pch = 19)
x = rnorm(3*20*50, mean = 0, sd = 0.1)
x = matrix(x + 0.5, ncol = 50)
x[1:20,2] = 1   # rows 1:20 are class1
x[21:40, 1] = 3 # rows 21:40 are class2
x[21:40, 2] = 3
x[41:60, 1] = 1 # rows 41:60 are class3
pr.out = prcomp(x)
summary(pr.out)
plot(pr.out$x, col = 4:6, xlab = 'Z1', ylab = 'Z2', pch = 19)
pr.out = prcomp(x)
summary(pr.out)
plot(pr.out$x[,1:2], col = 4:6, xlab = 'Z1', ylab = 'Z2', pch = 19)
km.out = kmeans(x, 3, nstart=20)
table(km.out$cluster, labels)
km2.out = kmeans(x, 2, nstart=20)
table(km2.out$cluster, labels)
km3.out = kmeans(x, 4, nstart=20)
table(km3.out$cluster, labels)
km4.out = kmeans(x[,1:2], 3, nstart=20)
table(km4.out$cluster, labels)
km5.out = kmeans(scale(x), 3, nstart=20)
table(km5.out$cluster, labels)
km5.out = kmeans(scale(x), 3, nstart=20)
table(km5.out$cluster, labels)
km.out = kmeans(x, 3, nstart=20)
table(km.out$cluster, labels)
km2.out = kmeans(x, 2, nstart=20)
table(km2.out$cluster, labels)
km3.out = kmeans(x, 4, nstart=20)
table(km3.out$cluster, labels)
km4.out = kmeans(x[,1:2], 3, nstart=20)
table(km4.out$cluster, labels)
km5.out = kmeans(scale(x), 3, nstart=20)
table(km5.out$cluster, labels)
source('~/Google Drive/Vestigo-Cogo WPI 2017/Fingerprinting-DS/rough.R', echo=TRUE)
wd
wd()
dir
getwd
getwd()
curwd()
wd
wd()
currentwd()
getwd
wl
wl()
unlink
unlink(August08thru142016.RData)
unlink("August08thru142016.RData")
# R script file for CS 573 Data Vis
# file cleanup
library(ggplot2)
setwd("/Users/SHOOP/Google Drive/CS 573 Data Viz/github-projs/DataVisFinal")
file = read.table('liquor-licenses-orig.csv',sep = ',',header = TRUE)
head(file)
# separate dataset
# R script file for CS 573 Data Vis
# file cleanup
library(ggplot2)
setwd("/Users/SHOOP/Google Drive/CS 573 Data Viz/github-projs/DataVisFinal/CSV")
file = read.table('liquor-licenses-orig.csv',sep = ',',header = TRUE)
head(file)
# separate dataset
# R script file for CS 573 Data Vis
# file cleanup
library(ggplot2)
setwd("/Users/SHOOP/Google Drive/CS 573 Data Viz/github-projs/DataVisFinal/CSV/")
file = read.table('liquor-licenses-orig.csv',sep = ',',header = TRUE)
head(file)
# separate dataset
file = read.csv('liquor-licenses-orig.csv',sep = ',',header = TRUE)
# R script file for CS 573 Data Vis
# file cleanup
library(ggplot2)
setwd("/Users/SHOOP/Google Drive/CS 573 Data Viz/github-projs/DataVisFinal/CSV/")
file = read.csv('liquor-licenses-orig.csv',sep = ',',header = TRUE)
head(file)
# separate dataset
file[1,]
file[,:]
file[2,]
file[:,]
sum(is.na(file))
sum(is.na(file$col))
any(is.na(file))
naCols = apply(file, 2, function(x) any(is.na(file)))
colnames(file)[colSums(is.na(file)) > 0]
head(file)
View(file)
